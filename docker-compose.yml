# ===========================================
# Docker Compose Configuration
# Real-Time Microservices Platform
# ===========================================

services:
  # -----------------
  # API Gateway (Nginx)
  # -----------------
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-gateway
    ports:
      - "80:80"
    depends_on:
      api-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # -----------------
  # API Service
  # -----------------
  api-service:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: api-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_SERVICE_PORT:-3000}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/microservices_db}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - ./api-service:/app
      - /app/node_modules

  # -----------------
  # Worker Service (Multiple Instances for Scaling)
  # -----------------
  worker-service-1:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    container_name: worker-service-1
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-100}
      - WORKER_NAME=worker-1
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./worker-service:/app
      - /app/node_modules

  worker-service-2:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    container_name: worker-service-2
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-100}
      - WORKER_NAME=worker-2
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./worker-service:/app
      - /app/node_modules

  # -----------------
  # Notification Service
  # -----------------
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${NOTIFICATION_SERVICE_PORT:-4000}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - ./notification-service:/app
      - /app/node_modules

  # -----------------
  # MongoDB Database
  # -----------------
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-microservices_db}
      # Uncomment for authentication in production:
      # - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      # - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # -----------------
  # Redis Cache & Message Broker
  # -----------------
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

# -----------------
# Networks
# -----------------
networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# -----------------
# Volumes (Data Persistence)
# -----------------
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
