# Nginx Configuration for Microservices Platform
# API Gateway with Load Balancing and WebSocket Support

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=notification_limit:10m rate=50r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream definitions for load balancing
    
    # API Service - Multiple instances for horizontal scaling
    upstream api_backend {
        least_conn;  # Use least connections load balancing algorithm
        
        server api-service:3000 max_fails=3 fail_timeout=30s;
        # Add more instances for scaling:
        # server api-service-2:3000 max_fails=3 fail_timeout=30s;
        # server api-service-3:3000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Notification Service - WebSocket support
    upstream notification_backend {
        ip_hash;  # Use IP hash for WebSocket sticky sessions
        
        server notification-service:4000 max_fails=3 fail_timeout=30s;
        # Add more instances for scaling:
        # server notification-service-2:4000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Root endpoint - API Gateway info
        location = / {
            default_type application/json;
            return 200 '{"message":"API Gateway - Microservices Platform","version":"1.0.0","services":{"api":"/api","notifications":"/notifications","health":"/health"}}';
        }

        # Health check endpoint
        location = /health {
            access_log off;
            default_type application/json;
            return 200 '{"status":"healthy","service":"nginx-gateway","timestamp":"$time_iso8601"}';
        }

        # API Service routing - REST endpoints
        location /api/ {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn addr 10;

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # Proxy settings
            proxy_pass http://api_backend;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # HTTP version for keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Notification Service routing - WebSocket support
        location /notifications/ {
            # Rate limiting (more lenient for WebSocket connections)
            limit_req zone=notification_limit burst=10 nodelay;

            # Proxy headers for WebSocket
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket upgrade headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Proxy pass to notification backend
            proxy_pass http://notification_backend;
            proxy_redirect off;

            # Timeouts (longer for WebSocket connections)
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for real-time
            proxy_buffering off;
        }

        # Socket.io specific path (alternative WebSocket endpoint)
        location /socket.io/ {
            # Proxy headers for WebSocket
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket upgrade headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Proxy pass to notification service
            proxy_pass http://notification_backend;
            proxy_redirect off;

            # Timeouts (longer for WebSocket connections)
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for real-time
            proxy_buffering off;
        }

        # Nginx status page (for monitoring)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }

        # Error pages
        error_page 404 /404.json;
        location = /404.json {
            internal;
            default_type application/json;
            return 404 '{"error":"Not Found","message":"The requested resource was not found","status":404}';
        }

        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            internal;
            default_type application/json;
            return 500 '{"error":"Internal Server Error","message":"An error occurred while processing your request","status":500}';
        }

        error_page 502 /502.json;
        location = /502.json {
            internal;
            default_type application/json;
            return 502 '{"error":"Bad Gateway","message":"The upstream service is unavailable","status":502}';
        }

        error_page 503 /503.json;
        location = /503.json {
            internal;
            default_type application/json;
            return 503 '{"error":"Service Unavailable","message":"The service is temporarily unavailable","status":503}';
        }

        error_page 504 /504.json;
        location = /504.json {
            internal;
            default_type application/json;
            return 504 '{"error":"Gateway Timeout","message":"The upstream service timed out","status":504}';
        }
    }
}
